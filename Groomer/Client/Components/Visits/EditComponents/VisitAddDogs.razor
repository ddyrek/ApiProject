@using Groomer.Shared.Dogs.Queries.AllDogsQuery
@using Groomer.Shared.Visits.Commands

<div class="card card-secondary">
    <div class="card-header">
        <h3 class="card-title">Dogs</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <label for="dogsId">Dog name</label>
            <InputSelect disabled="@EditMode" id="PiesId" @bind-Value="NewVisit.PiesId" class="form-control">
                <option value="" disabled>-----Select Value-----</option>
                @foreach (var item in Psy.Dogs)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>

            <label for="files">Files</label>
            <InputFile id="files" OnChange="OnChangeInputFile" multiple class="form-control" />
        </div>
        <div class="row">
            <div class="col-12">
                <input type="button" value="Enter edit mode" class="btn btn-warning" @onclick="ToggleEditMode" />
            </div>
        </div>
    </div>
    <!-- /.card-body -->
</div>
<!-- /.card -->
@code {
    private IReadOnlyList<IBrowserFile> files;
    [Parameter]
    public FilteredDogsList Psy { get; set; }
    //public PsyList Psy { get; set; }
    //private List<DogsForListVm> dogs = new List<DogsForListVm>();// List<DogVm> bo Kolekcja w

    [Parameter]
    public AddVisitVM NewVisit { get; set; } //wczesniej = new();

    public bool EditMode { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditModeChanged { get; set; }
    //dzięki EventCallback możemy np przekazać parametr z dziecka do rodzica (czyli do CustomerAdd.razor) czyli odwrotnie jak w OneWayBinding i CascadingValue tak jak w tym przykładzie. Możemy przekazywać flage tak jak tu bool lub inne typy w tym bardziej złożone.


    //protected override async Task OnInitializedAsync()
    //{
    //    //httpClient = new HttpClient();
    //    // Wykonaj żądanie GET do API, które zwraca listę psów
    //    Psy = await http.GetFromJsonAsync<PsyList>("https://localhost:7233/api/psy");
    //    //przefiltrowania danych do Id i Nazwy psa
    //    //var przefiltrowanePsy = dogs.Select(p => new { Id = p.Id, Nazwa = p.Name }).ToList();
    //}
    

    private void OnChangeInputFile(InputFileChangeEventArgs args)
    {
        files = args.GetMultipleFiles();
    }

    private async Task ToggleEditMode()
    {
        EditMode = !EditMode;
        StateHasChanged();
        await OnEditModeChanged.InvokeAsync(EditMode); //wyzwalamy EventCallback po prezez Invoke
    }
}
