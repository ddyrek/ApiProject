@using Groomer.Shared.Customers.Commands
@using Groomer.Client.Shared.Components.CustomInputs

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">General</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <CustomInputText Id="name" Label="Name" @bind-Value="Name"></CustomInputText>
        @*<CustomInputText Id="confirmName" Label="Confirm Name" @bind-Value="NewCustomer.ConfirmName"></CustomInputText>*@

        <label for="surname">Surname</label>


        <InputTextArea disabled="@EditMode" id="surname" @bind-Value="NewCustomer.Surname" rows="5" placeholder="This is surname" @attributes="@InputAttributes" />
        <ValidationMessage For="() => NewCustomer.Surname" />

        <label for="phoneNumber">Phone Number</label>

        <InputText disabled="@EditMode" id="phoneNumber" @bind-Value="NewCustomer.PhoneNumber" @attributes="@InputAttributes" />
        <label for="KontrahentId">Kontrahent Id</label>

        <InputNumber disabled="@EditMode" id="KontrahentId" @bind-Value="NewCustomer.KontrahentId" @attributes="@InputAttributes" class="form-control form-control-lg"/>

        @*od prawej do lewej jeżeli chodzi ważniejsze style, zawsze te po prawej maja priorytet
        czyli @attributes="@InputAttributes" class="form-control form-control-lg" w tym zapisie form-control form control nadpisuje style zawarte w @InputAttributes
        *@
    </div>
    <!-- /.card-body -->
</div>
<!-- /.card -->
@code{
    [Parameter]
    public AddCustomerVM NewCustomer { get; set; } //wczesniej = new();

    private string name;

    [Parameter]
    public string Name
    {
        get => name;
        set
        {
            if (name == value) return;
            name = value;
            NameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> NameChanged { get; set; } 
    //Tu bardzo wazna jest konwencja nazewnicza, musimy nazwać dokładanie tak samo jak nasza Właściwość+Changed

    [CascadingParameter(Name ="EditMode")]
    public bool EditMode { get; set; } = false;

    private Dictionary<string, object> InputAttributes { get; set; } =
    new Dictionary<string, object>()
        {
            { "class", "form-control"},
            { "maxlenght", "20"},
            { "required", "required"}
        };
}