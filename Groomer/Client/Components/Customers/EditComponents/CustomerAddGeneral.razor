﻿@using Groomer.Shared.Customers.Commands

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">General</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <CustomInputText Id="name" Label="Name" EditMode="@EditMode" @bind-Value="Name"></CustomInputText>

        <label for="surname">Surname</label>
        <InputTextArea disabled="@EditMode" id="surname" @bind-Value="NewCustomer.Surname" rows="5" placeholder="This is name"  @attributes="@InputAttributes" />
        <ValidationMessage For="() => NewCustomer.Surname" />
        <label for="isAdvertised">Is Advertised</label>

        <InputCheckbox disabled="@EditMode" id="phoneNumber" @bind-Value="NewCustomer.PhoneNumber" />
        <label for="scheduledDate">Scheduled Date</label>

        @*<InputDate disabled="@EditMode" id="scheduledDate" @bind-Value="NewPost.ScheduledDate" @attributes="@InputAttributes"/>
        <label for="DaysForAds">Days For Ads</label>*@

        <InputNumber disabled="@EditMode" id="DaysForAds" @bind-Value="NewPost.DaysForAds" @attributes="@InputAttributes" />

        <label for="AdsBudget">Ads Budget</label>

        <InputNumber disabled="@EditMode" id="AdsBudget" @bind-Value="NewPost.AdsBudget" @attributes="@InputAttributes" class="form-control form-control-lg" />
    </div>
    <!-- /.card-body -->
</div>
<!-- /.card -->
@code {
    [Parameter]
    public AddCustomerVM NewCustomer { get; set; }

    private string name;

    [Parameter]
    public string Name
    {
        get => name;
        set
        {
            if (name == value) return;
            name = value;
            NameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> NameChanged { get; set; }

    [CascadingParameter(Name="EditMode")]
    public bool EditMode { get; set; }

    private Dictionary<string, object> InputAttributes { get; set; } =
    new Dictionary<string, object>()
        {
        { "class", "form-control form-control-sm"},
        { "maxlength", "20"},
        { "required", "required"}
        };

}
